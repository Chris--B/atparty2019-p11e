// automatically generated by rust-bindgen

pub type GLenum = libc::c_uint;
pub type GLbitfield = libc::c_uint;
pub type GLint = libc::c_int;
pub type GLuint = libc::c_uint;
pub type GLsizei = libc::c_int;
pub type GLfloat = f32;
pub type GLdouble = f64;
pub type GLchar = libc::c_char;
pub type PFNGLCLEARPROC = unsafe extern "C" fn(mask: GLbitfield);
pub type PFNGLCLEARCOLORPROC = unsafe extern "C" fn(
    red: GLfloat,
    green: GLfloat,
    blue: GLfloat,
    alpha: GLfloat,
);
pub type PFNGLCLEARDEPTHPROC = unsafe extern "C" fn(depth: GLdouble);
pub type PFNGLATTACHSHADERPROC =
    unsafe extern "C" fn(program: GLuint, shader: GLuint);
pub type PFNGLCOMPILESHADERPROC = unsafe extern "C" fn(shader: GLuint);
pub type PFNGLCREATEPROGRAMPROC = unsafe extern "C" fn() -> GLuint;
pub type PFNGLCREATESHADERPROC = unsafe extern "C" fn(type_: GLenum) -> GLuint;
pub type PFNGLLINKPROGRAMPROC = unsafe extern "C" fn(program: GLuint);
pub type PFNGLSHADERSOURCEPROC = unsafe extern "C" fn(
    shader: GLuint,
    count: GLsizei,
    string: *const *const GLchar,
    length: *const GLint,
);
pub type PFNGLUSEPROGRAMPROC = unsafe extern "C" fn(program: GLuint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GlFuncs {
    pub pfn_glCreateShader:  PFNGLCREATESHADERPROC,
    pub pfn_glShaderSource:  PFNGLSHADERSOURCEPROC,
    pub pfn_glCompileShader: PFNGLCOMPILESHADERPROC,
    pub pfn_glAttachShader:  PFNGLATTACHSHADERPROC,
    pub pfn_glCreateProgram: PFNGLCREATEPROGRAMPROC,
    pub pfn_glLinkProgram:   PFNGLLINKPROGRAMPROC,
    pub pfn_glUseProgram:    PFNGLUSEPROGRAMPROC,
    pub pfn_glClearColor:    PFNGLCLEARCOLORPROC,
    pub pfn_glClear:         PFNGLCLEARPROC,
    pub pfn_glClearDepth:    PFNGLCLEARDEPTHPROC,
}
extern "C" {
    /// Loads required OpenGL functions into pFns.
    ///
    /// Return value == 0  if all required functions are loaded.
    /// Return value <= -1 if someone went wrong - e.g. invalid arguments.
    /// Return value >=  1 if 1 or more functions failed to load.
    ///
    /// Functions are marked as required in the `GlFuncs` struct definition.
    pub fn ogl_load(pFns: *mut GlFuncs) -> libc::c_int;
}
